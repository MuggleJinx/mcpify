#!/usr/bin/env python3
"""
MCP Server - dynamically loads tools from config file

This is a standalone executable script for running MCP servers.
It can be used by MCP clients to start servers with different configurations.

Usage:
    mcp-serve config.json
    mcp-serve config.json --mode streamable-http --port 8080
"""

import argparse
import sys
from pathlib import Path

try:
    from mcpify.wrapper import MCPWrapper
except ImportError:
    print("‚ùå Error: mcpify package not found. Please install it with:")
    print("   pip install mcpify")
    sys.exit(1)


def main():
    """Main entry point for the MCP server"""
    parser = argparse.ArgumentParser(
        description="MCP Server - loads tools from config file", prog="mcp-serve"
    )
    parser.add_argument("config_file", help="Path to the MCP configuration file")
    parser.add_argument(
        "--mode",
        choices=["stdio", "streamable-http"],
        default="stdio",
        help="Server mode (default: stdio)",
    )
    parser.add_argument(
        "--host", default="localhost", help="Host for HTTP mode (default: localhost)"
    )
    parser.add_argument(
        "--port", type=int, default=8080, help="Port for HTTP mode (default: 8080)"
    )

    args = parser.parse_args()

    # Check if config file exists
    config_file = Path(args.config_file)
    if not config_file.exists():
        print(f"‚ùå Error: Configuration file does not exist: {config_file}")
        sys.exit(1)

    try:
        # Create wrapper
        wrapper = MCPWrapper(str(config_file))

        # Start server based on mode
        if args.mode == "stdio":
            print("üöÄ Starting MCP server in stdio mode...")
            wrapper.run()
        elif args.mode == "streamable-http":
            print(
                f"üöÄ Starting MCP server in HTTP mode on " f"{args.host}:{args.port}..."
            )
            mcp_server = wrapper.server()

            # Start backend if needed
            if wrapper.adapter:
                import asyncio

                asyncio.run(wrapper.start_backend())

            try:
                mcp_server.run(transport="sse", host=args.host, port=args.port)
            finally:
                if wrapper.adapter:
                    import asyncio

                    asyncio.run(wrapper.stop_backend())

    except KeyboardInterrupt:
        print("\nüõë Server stopped.")
    except Exception as e:
        print(f"‚ùå Error starting server: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
